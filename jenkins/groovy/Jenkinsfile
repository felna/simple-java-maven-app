// @Library(['https://github.com/dennyzhang/cheatsheet-jenkins-groovy-A4/blob/master/git-checkout.groovy']) _

pipeline {
  agent {
    docker {
    image 'maven:3-alpine'
    args '-v /root/.m2:/root/.m2'
    }
  }

  options {
    timeout(time: 60, unit: 'MINUTES')
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }

  stages {

    // stage('Clean Workspace') {
    //   steps {
    //     // Clean the workspace
    //   }
    // }

    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM', branches: [[name: '*/master']],
        userRemoteConfigs: [[url: 'https://github.com/felna/simple-java-maven-app']]])
      }
    }

    stage('Build') {
      steps {
        sh 'mvn -B -DskipTests clean package'
      }
    }

    // stage('Test') {
    //   steps {
    //     // Test (Unit test / Automation test(Selenium/Robot framework) / etc.)
    //   }
    // }

    // stage('Code Analysis') {
    //   steps {
    //     // Static Code analysis (Coverity/ SonarQube /openvas/Nessus etc.)
    //   }
    // }

    // stage('Generate Release Notes') {
    //   steps {
    //     // Release note generation .
    //   }
    // }

    // stage('Tagging') {
    //   steps {
    //     // Tagging specific version number
    //   }
    // }

    // stage('Release') {
    //   steps {
    //     // release specific versions(Snapshot / release / etc.)
    //   }
    // }

    // stage('Deploy') {
    //   steps {
    //     // Deploy to cloud providers /local drives /artifactory etc.
    //     // Deploy to Deploy/prod /test/ etc
    //   }
    // }
  }

  post {
    success {
      echo "SUCCESS"
    }
    failure {
      echo "FAILURE"
    }
    changed {
      echo "Status Changed: [From: $currentBuild.previousBuild.result, To: $currentBuild.result]"
    }
    always {
      script {
        def result = currentBuild.result
        if (result == null) {
          result = "SUCCESS"
        }
      }
    }
  }
}